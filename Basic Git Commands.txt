Basic Git Commands
pwd -> Print working directory.
cd -> Change working directory (cd.. or cd~).
ls -> List files in a directory (dir for Windows users).
mkdir -> Create a new empty folder.
git --version -> Returns the version of the installed Git.
git config --global user.name "John Doe" user.email "john.doe@gmail.com" -> Sets global configuration for user name and email.
git config --list

git init -> Create a new local GIT repository.
git init [project name] -> Create a new local GIT repository and specifying a project name.
git clone [username@host:/path/to/repository] -> is used to copy a repository. If the repository lies on a remote server.
git remote add origin [Remote Repository URL]
git push -u origin [branch ex: master]
git push -f origin [branch ex: master] -> forced pushed to remote repository.
git status
git status -s
git diff
git diff --staged
git commit -m "message"
git commit -a -m "message"
git checkout [branch or [commit code]]
git rm [file-name] -> Removing the file.
git rm --cached [file-name] -> Removing file and untrack it.
git mv [file-name] [new-file-name] -> renaming file.
git stash
git stash list
git stash show
git clone [url]
git reset [commit code]
git reset --soft [commit code] -> placed changes under staging area.
git reset --mixed [commit code] -> placed changes under working directory. This is the default, just a command of "git reset"
git reset --hard [commit code] -> placed changes under trash or deleted.

######################################################################################################

git reset --soft HEAD~N where N is the number of commits back you want to "undo". 
after you run this command, it will take all of the files in those commits and 
moved them back to staged in your repo. from there, you can then unstage the necessary files. 
then finish it with git commit -m "your message" and you will have a brand new commit. 
then git push -f origin branchname to update ADO

HEAD~1 means the most recent commit.
HEAD~5 means the five most recent commits.

######################################################################################################

Step 1. Add the folder path to your repo's root .gitignore file.
-> path_to_your_folder/
Step 2. Remove the folder from your local git tracking, but keep it on your disk.
-> git rm -r --cached path_to_your_folder/
Step 3. Push your changes to your git repo.

######################################################################################################

Visualizing Git -> http://git-school.github.io/visualizing-git/

######################################################################################################